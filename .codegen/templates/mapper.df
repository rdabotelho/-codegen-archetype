template {
	sourceFile: 'mapper.java'
	targetFile: 'src/main/java/${PACKAGE.convertDotToSlash}/domain/mapper/${domain.name}Mapper.java'
	scope: 'entity'
	block(1, 1) {
	    replace('com.example.demo', PACKAGE)
	}
	block(3, 4) {
	    replace('com.example.demo', PACKAGE)
		replace('DomainName', domain.name.pascalCase)
	}
	block(6, 6) {
		showIf(domain.attributes.contains, 'type', 'Date')
	}
	block(7, 7) {
		showIf(domain.attributes.contains, 'type', 'DateTime')
	}
	block(8, 8, 'OR') {
		showIf(domain.attributes.contains, 'type', 'Date')
		showIf(domain.attributes.contains, 'type', 'DateTime')
	}
	block(9, 9) {
	    showIf(domain.attributes.contains, 'list', 'true')
	}
	block(10, 10) {
	    showIf(domain.attributes.contains, 'enum', 'true')
		replace('com.example.demo', PACKAGE)
	}
	block(12, 12) {
		replace('DomainName', domain.name.pascalCase)
	}
	block(14, 14) {
		replace('DomainName', domain.name.pascalCase)
	}
	block(16, 22) {
		replace('DomainName', domain.name.pascalCase)
	}
	block(25, 29) {
	    iterate(domain.attributes, item) {
	        block(25, 25) {
                showIf(item.basic.equals, 'true')
                showIf(item.type.notEquals, 'Date')
                showIf(item.type.notEquals, 'DateTime')
                replace('Attribute', item.name.pascalCase)
	        }
	        block(26, 26, 'OR') {
                showIf(item.type.equals, 'Date')
                showIf(item.type.equals, 'DateTime')
                replace('Attribute', item.name.pascalCase)
                replace('Date', item.type)
                replace('DateTimeTimeFormatter', 'DateTimeFormatter')
	        }
	        block(27, 27) {
                showIf(item.enum, 'true')
                replace('Attribute', item.name.pascalCase)
                replace('TypeDomainName', item.type)
	        }
	        block(28, 28) {
                showIf(item.oneToOne.equals, 'true')
                replace('Other', item.type)
                replace('Attribute', item.name.pascalCase)
	        }
	        block(29, 29) {
                showIf(item.list.equals, 'true')
                replace('Other', item.typeDomain.name)
                replace('Attribute', item.name.pascalCase)
	        }
	    }
	}
	block(33, 35) {
		replace('DomainName', domain.name.pascalCase)
	}
	block(37, 41) {
	    iterate(domain.attributes, item) {
	        block(37, 37) {
                showIf(item.basic.equals, 'true')
                showIf(item.type.notEquals, 'Date')
                showIf(item.type.notEquals, 'DateTime')
                replace('Attribute', item.name.pascalCase)
	        }
	        block(38, 38, 'OR') {
                showIf(item.type.equals, 'Date')
                showIf(item.type.equals, 'DateTime')
                replace('Attribute', item.name.pascalCase)
	        }
	        block(39, 39) {
                showIf(item.enum, 'true')
                replace('Attribute', item.name.pascalCase)
	        }
	        block(40, 40) {
                showIf(item.oneToOne.equals, 'true')
                replace('Other', item.type)
                replace('Attribute', item.name.pascalCase)
	        }
	        block(41, 41) {
                showIf(item.list.equals, 'true')
                replace('Other', item.typeDomain.name)
                replace('Attribute', item.name.pascalCase)
	        }

	    }
	}

}
